services:
  mysql:
    image: mysql:8.0
    container_name: group3-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: MySecurePassword123!
      MYSQL_DATABASE: blog_db
      MYSQL_USER: admin
      MYSQL_PASSWORD: MySecurePassword123!
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - blog-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: group3-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - blog-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Cognito Local (thay tháº¿ AWS Cognito)
  cognito-local:
    image: jagregory/cognito-local:latest
    container_name: group3-cognito
    restart: unless-stopped
    ports:
      - "9229:9229"
    volumes:
      - ./docker/cognito-local:/app/.cognito
    environment:
      DEBUG: cognito-local:*
      COGNITO_LOCAL_CONFIG_PATH: /app/.cognito/config.json
    networks:
      - blog-network

  # Cognito User Seeder
  cognito-seeder:
    image: alpine:latest
    container_name: group3-cognito-seeder
    depends_on:
      - cognito-local
    volumes:
      - ./docker/cognito-local/init-users.sh:/init-users.sh
    command: sh -c "apk add --no-cache curl netcat-openbsd && sleep 10 && sh /init-users.sh"
    networks:
      - blog-network

  nginx:
    image: nginx:alpine
    container_name: group3-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - blog-app
      - minio
    networks:
      - blog-network

  # Blog Application
  blog-app:
    build: ./app
    container_name: group3-blog-app
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      NODE_ENV: development
      PORT: 80
      # Database
      DB_HOST: mysql
      DB_USER: admin
      DB_PASSWORD: MySecurePassword123!
      DB_NAME: blog_db
      DB_PORT: 3306
      # AWS Mock Services
      AWS_REGION: us-east-1
      # MinIO (S3 replacement)
      S3_BUCKET_NAME: group3-blog-static
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_FORCE_PATH_STYLE: true
      # Cognito Local
      COGNITO_ENDPOINT: http://cognito-local:9229
      COGNITO_USER_POOL_ID: local_3Q1ktWNN
      COGNITO_CLIENT_ID: 2s00fkusj37pbs3ejsg3ut855
      CDN_DOMAIN: localhost
    volumes:
      - ./app:/app
      - /app/node_modules
    depends_on:
      mysql:
        condition: service_healthy
      minio:
        condition: service_healthy
      cognito-local:
        condition: service_started
    networks:
      - blog-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio-client:
    image: minio/mc:latest
    container_name: group3-minio-client
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/group3-blog-static;
      /usr/bin/mc policy set public myminio/group3-blog-static;
      exit 0;
      "
    networks:
      - blog-network

volumes:
  mysql_data:
    driver: local
  minio_data:
    driver: local
  nginx_cache:
    driver: local

networks:
  blog-network:
    driver: bridge
